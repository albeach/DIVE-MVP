name: DIVE25 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/dive25

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          cd ../api
          npm ci

      - name: Run linters
        run: |
          cd frontend
          npm run lint
          cd ../api
          npm run lint

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run dependency scanning
        uses: snyk/actions/node@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run SAST scanning
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          cd ../api
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          npm test
          cd ../api
          npm test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            frontend/test-results
            api/test-results

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_PREFIX }}/api
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_PREFIX }}/frontend
          tags: |
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.5.7"

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update Kustomize images
        run: |
          cd k8s/environments/development
          kustomize edit set image ghcr.io/dive25/api=${{ env.IMAGE_PREFIX }}/api:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/dive25/frontend=${{ env.IMAGE_PREFIX }}/frontend:sha-${{ github.sha }}

      - name: Deploy to Kubernetes
        run: |
          kustomize build k8s/environments/development | kubectl apply -f -
          kubectl rollout status deployment/dev-dive25-api -n dive25-dev --timeout=180s
          kubectl rollout status deployment/dev-dive25-frontend -n dive25-dev --timeout=180s

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.5.7"

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update Kustomize images
        run: |
          cd k8s/environments/production
          kustomize edit set image ghcr.io/dive25/api=${{ env.IMAGE_PREFIX }}/api:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/dive25/frontend=${{ env.IMAGE_PREFIX }}/frontend:sha-${{ github.sha }}

      - name: Deploy to Kubernetes
        run: |
          kustomize build k8s/environments/production | kubectl apply -f -
          kubectl rollout status deployment/prod-dive25-api -n dive25-prod --timeout=180s
          kubectl rollout status deployment/prod-dive25-frontend -n dive25-prod --timeout=180s