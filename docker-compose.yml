services:

  # Database Services
  
  mongodb:
    image: mongo:6.0
    container_name: dive25-staging-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: dive25
    volumes:
      - mongo_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - dive25-data
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Express for MongoDB administration
  mongo-express:
    image: mongo-express:latest
    container_name: dive25-staging-mongo-express
    restart: unless-stopped
    ports:
      - "4435:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin_password
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin_password@dive25-staging-mongodb:27017/admin?authSource=admin
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin_password}
      ME_CONFIG_SITE_COOKIESECRET: cookiesecret
      ME_CONFIG_SITE_SESSIONSECRET: sessionsecret
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
    depends_on:
      - mongodb
    networks:
      - dive25-admin
      - dive25-data  # Needs access to MongoDB

  # PostgreSQL for Keycloak
  postgres:
    image: postgres:15
    container_name: dive25-staging-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dive25-data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Kong PostgreSQL Database
  kong-database:
    image: postgres:13
    container_name: dive25-staging-kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_password
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    networks:
      - dive25-data

  # OpenLDAP Directory Service
  openldap:
    image: osixia/openldap:latest
    container_name: dive25-staging-openldap
    restart: unless-stopped
    environment:
      LDAP_ORGANISATION: "DIVE25"
      LDAP_DOMAIN: "dive25.local"
      LDAP_BASE_DN: dc=dive25,dc=local
      LDAP_ADMIN_PASSWORD: admin_password
      LDAP_CONFIG_PASSWORD: config_password
      LDAP_READONLY_USER: "true"
      LDAP_READONLY_USER_USERNAME: "readonly"
      LDAP_READONLY_USER_PASSWORD: readonly_password
      LDAP_TLS: "false"
      LDAP_SKIP_DEFAULT_BOOTSTRAP: "false"
      LDAP_REPLICATION: "false"
      LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
      - ./openldap/bootstrap:/container/service/slapd/assets/config/bootstrap
    networks:
      - dive25-data
    healthcheck:
      test: ["CMD", "ldapsearch", "-x", "-H", "ldap://localhost:389", "-D", "cn=admin,dc=dive25,dc=local", "-w", "admin_password", "-b", "dc=dive25,dc=local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Infrastructure Services

  # Keycloak Identity Provider
  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    container_name: dive25-staging-keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: dive25-staging-postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_FEATURES: admin-api,impersonation,import-realm
      # CSP settings
      KC_SPI_CONTENT_SECURITY_POLICY_ENABLED: "true"
      KC_PROXY: edge
      KC_HTTP_ENABLED: "true"
      KC_HTTPS_PORT: 8443
      # Use consistent domain/URL configuration
      KC_HOSTNAME: "keycloak.dive25.local"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "true"
      KC_SPI_LOGIN_PROTOCOL_OPENID_CONNECT_SUPPRESS_LOGOUT_CONFIRMATION_SCREEN: "true"
      KC_SPI_EVENTS_LISTENER: "jboss-logging,admin-event-listener"
      KC_HTTP_CORS: "true"
      KC_HTTP_CORS_ALLOWED_ORIGINS: "https://frontend.dive25.local:3001,https://api.dive25.local:3002,https://keycloak.dive25.local:8443,https://kong.dive25.local:8443,https://dive25.local:8443"
      KC_HTTP_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      KC_SPI_LOGIN_PROTOCOL_OPENID_CONNECT_OVERRIDE_WELL_KNOWN: "true"
      KC_SPI_HOSTNAME_DEFAULT_FRONTEND_URL: "https://keycloak.dive25.local:8443"
      KC_SPI_LOGIN_PROTOCOL_OPENID_CONNECT_LEGACY_LOGOUT_REDIRECT_URI: "true"
      # Force port 8443 for all Keycloak URLs
      KC_HOSTNAME_PORT: "8443"
      KC_HOSTNAME_PORT_HTTPS: "8443"
      # Additional settings to ensure consistent port usage
      KC_SPI_HOSTNAME_DEFAULT_HOSTNAME: "keycloak.dive25.local"
      KC_SPI_HOSTNAME_DEFAULT_HOSTNAME_PORT: "8443"
      KC_SPI_HOSTNAME_DEFAULT_ADMIN_URL: "https://keycloak.dive25.local:8443"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./certs:/opt/keycloak/certs:ro
    ports:
      - "8444:8443"  # External HTTPS access
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dive25-service
      - dive25-data
    healthcheck:
      test: ["CMD", "true"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Keycloak Configuration
  keycloak-config:
    build:
      context: ./keycloak
      dockerfile: Dockerfile.config
    container_name: dive25-staging-keycloak-config
    # This container is designed to exit after successful configuration
    # It will exit with code 0 when complete - this is expected behavior
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - ./keycloak/realm-export.json:/realm-export.json:ro
      - ./keycloak/identity-providers:/opt/keycloak/data/identity-providers:ro
      - ./keycloak/test-users:/test-users:ro
      - ./keycloak/clients:/clients:ro
      - keycloak_config_data:/tmp/keycloak-config
    environment:
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - PUBLIC_KEYCLOAK_URL=https://keycloak.dive25.local:8443
      - PUBLIC_FRONTEND_URL=https://frontend.dive25.local:3001
      - PUBLIC_API_URL=https://api.dive25.local:3002
      - KEYCLOAK_REALM=dive25
      - KEYCLOAK_CLIENT_ID_FRONTEND=dive25-frontend
      - KEYCLOAK_CLIENT_ID_API=dive25-api
      - KEYCLOAK_CLIENT_SECRET=change-me-in-production
      - KEYCLOAK_CONTAINER=dive25-staging-keycloak
    networks:
      - dive25-service
    # Only restart in case of failure, not after successful completion
    restart: no
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/keycloak-config/realm-ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # OPA Policy Agent
  opa:
    build:
      context: ./opa
      dockerfile: Dockerfile
    container_name: dive25-staging-opa
    restart: unless-stopped
    volumes:
      - ./opa/policies:/opt/opa/policies:ro
      - opa_data:/data
    networks:
      - dive25-service

  # Kong Migrations
  kong-migrations:
    build:
      context: ./kong
      dockerfile: Dockerfile
    container_name: dive25-staging-kong-migrations
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: dive25-staging-kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      # Add environment variables for configuration template
      BASE_DOMAIN: dive25.local
      INTERNAL_FRONTEND_URL: http://frontend:3000
      INTERNAL_API_URL: http://api:3000
      INTERNAL_KEYCLOAK_URL: http://keycloak:8080
      PUBLIC_KEYCLOAK_URL: https://keycloak.dive25.local:8443
    networks:
      - dive25-data
    restart: on-failure

  # Kong API Gateway
  kong:
    build:
      context: ./kong
      dockerfile: Dockerfile
    container_name: dive25-staging-kong
    depends_on:
      - kong-database
    command: >
      sh -c "if [ -f /usr/local/kong/pids/nginx.pid ]; then 
               rm -f /usr/local/kong/pids/nginx.pid; 
               echo 'Removed stale nginx.pid file'; 
             fi &&
             if [ -f /usr/local/kong/nginx.pid ]; then 
               rm -f /usr/local/kong/nginx.pid; 
               echo 'Removed stale nginx.pid file'; 
             fi &&
             /docker-entrypoint.sh kong docker-start"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - dive25-public
      - dive25-service
      - dive25-data
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: dive25-staging-kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      # Add environment variables for configuration template
      BASE_DOMAIN: dive25.local
      INTERNAL_FRONTEND_URL: http://frontend:3000
      INTERNAL_API_URL: http://api:3000
      INTERNAL_KEYCLOAK_URL: http://keycloak:8080
      INTERNAL_KEYCLOAK_AUTH_URL: http://keycloak:8080/auth
      PUBLIC_KEYCLOAK_URL: https://keycloak.dive25.local:8443
      PUBLIC_KEYCLOAK_AUTH_URL: https://keycloak.dive25.local:8443/auth
      KEYCLOAK_REALM: dive25
      KEYCLOAK_CLIENT_ID: dive25-frontend
      KEYCLOAK_CLIENT_ID_API: dive25-api
      KEYCLOAK_CLIENT_SECRET: change-me-in-production
      SESSION_SECRET: your_session_secret
      # Additional configuration
      KONG_PLUGINS: bundled,ldap-auth,oidc-auth
      KONG_SSL_CERT: /etc/kong/certs/dive25-cert.pem
      KONG_SSL_CERT_KEY: /etc/kong/certs/dive25-key.pem
      KONG_NGINX_HTTP_RESOLVER: 1.1.1.1 8.8.8.8
      KONG_NGINX_HTTP_LUA_SHARED_DICT: sessions 10m
      KONG_MEM_CACHE_SIZE: 128m
      KONG_NGINX_WORKER_PROCESSES: 2
      KONG_LOG_LEVEL: debug
    volumes:
      - ./certs:/etc/kong/certs:ro
      - ./kong/certs:/usr/local/kong/certs:ro
      - ./kong/plugins:/usr/local/kong/plugins:ro
      - ./kong/kong-configure-unified.sh:/app/kong-configure-unified.sh:ro
    ports:
      - "4433:8000"
      - "8443:8443"
      - "9444:8001"
      - "9445:8444"

  # Optional: Kong Admin UI
  konga:
    image: pantsel/konga:latest
    container_name: dive25-staging-konga
    environment:
      NODE_ENV: production
      DB_ADAPTER: postgres
      DB_HOST: dive25-staging-kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong_password
      DB_DATABASE: konga
    ports:
      - "4439:1337"
    depends_on:
      - kong-database
      - kong
    networks:
      - dive25-admin
      - dive25-data  # Needs access to kong-database
    restart: unless-stopped

  # Kong Configuration
  kong-config:
    build:
      context: ./kong
      dockerfile: Dockerfile.config
    container_name: dive25-staging-kong-config
    environment:
      KONG_ADMIN_URL: http://null:8001
      KONG_ADMIN_TOKEN: change-me-in-production
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: dive25
      KEYCLOAK_CLIENT_ID: dive25-frontend
      KEYCLOAK_CLIENT_SECRET: change-me-in-production
      INTERNAL_FRONTEND_URL: http://frontend:3000
      INTERNAL_API_URL: http://api:3000
      INTERNAL_KEYCLOAK_URL: http://keycloak:8080
      BASE_DOMAIN: dive25.local
      ENVIRONMENT: staging
    volumes:
      - ./kong/kong-configure-unified.sh:/app/kong-configure-unified.sh:ro
      - keycloak_config_data:/tmp/keycloak-config:ro
    depends_on:
      kong:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    # Add an entrypoint that checks for the presence of the realm-ready file before proceeding
    entrypoint: >
      /bin/sh -c "
      echo 'Checking for Keycloak realm readiness...' &&
      for i in {1..60}; do
        if [ -f /tmp/keycloak-config/realm-ready ]; then
          echo 'Keycloak realm is ready, proceeding with Kong configuration.' &&
          /app/kong-configure-unified.sh;
          exit $$?;
        fi;
        echo 'Waiting for Keycloak realm to be ready... ($/60)';
        sleep 5;
      done;
      echo 'Timeout waiting for Keycloak realm readiness. Proceeding anyway...';
      /app/kong-configure-unified.sh"
    networks:
      - dive25-admin
      - dive25-service
    restart: on-failure:3

  # Monitoring Services

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dive25-staging-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "4437:9090"
    networks:
      - dive25-admin
      - dive25-service  # Needs access to monitoring targets
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dive25-staging-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "https://grafana.dive25.local:4434"
      GF_AUTH_PROXY_ENABLED: "true"
      GF_AUTH_PROXY_HEADER_NAME: "X-WEBAUTH-USER"
      GF_AUTH_PROXY_HEADER_PROPERTY: "username"
      GF_AUTH_PROXY_AUTO_SIGN_UP: "true"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "4434:3000"
    depends_on:
      - prometheus
    networks:
      - dive25-admin
      - dive25-service  # Needs access to Prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # MongoDB Exporter for Prometheus
  mongodb-exporter:
    image: percona/mongodb_exporter:0.32.0
    container_name: dive25-staging-mongodb-exporter
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://mongodb:27017/admin?directConnection=true
    ports:
      - "4440:9216"
    depends_on:
      - mongodb
    networks:
      - dive25-data  # Access to MongoDB
      - dive25-admin  # Access for Prometheus to scrape metrics

  # Node Exporter for Host Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: dive25-staging-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "4441:9100"
    networks:
      - dive25-admin  # Only needs to be accessible by Prometheus

  # LDAP Admin UI
  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: dive25-staging-phpldapadmin
    restart: unless-stopped
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: "dive25-staging-openldap"
      PHPLDAPADMIN_HTTPS: "false"
    ports:
      - "4436:80"
    depends_on:
      - openldap
    networks:
      - dive25-admin
      - dive25-data  # Needs access to OpenLDAP

  # Application Services

  # Backend API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: dive25-staging-api
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      PORT: 3000
      MONGODB_URI: mongodb://dive25_app:app_password@dive25-staging-mongodb:27017/dive25?authSource=dive25
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: dive25
      KEYCLOAK_CLIENT_ID: dive25-api
      KEYCLOAK_CLIENT_SECRET: change-me-in-production
      PUBLIC_KEYCLOAK_URL: https://keycloak.dive25.local:8443
      PUBLIC_KEYCLOAK_AUTH_URL: https://keycloak.dive25.local:8443/auth
      OPA_URL: http://opa:8181/v1/data
      OPA_POLICY_PATH: dive25/document_access/allow
      LDAP_URL: ldap://openldap:80
      LDAP_BIND_DN: cn=admin,dc=dive25,dc=local
      LDAP_BIND_CREDENTIALS: admin_password
      LDAP_SEARCH_BASE: dc=dive25,dc=local
      CORS_ALLOWED_ORIGINS: https://frontend.dive25.local:3001,https://api.dive25.local:3002,https://keycloak.dive25.local:8443,https://kong.dive25.local:8443,https://dive25.local:8443
      PUBLIC_API_URL: https://api.dive25.local:3002
      PUBLIC_FRONTEND_URL: https://frontend.dive25.local:3001
      STORAGE_PATH: /app/storage
      TEMP_STORAGE_PATH: /app/temp
      JWT_SECRET: change-me-in-production
      LOG_LEVEL: info
      # Add HTTPS configuration
      USE_HTTPS: true
      SSL_CERT_PATH: /app/certs/tls.crt
      SSL_KEY_PATH: /app/certs/tls.key
    volumes:
      - api_storage:/app/storage
      - api_temp:/app/temp
      - api_logs:/app/logs
      - ./certs:/app/certs:ro
    depends_on:
      - mongodb
      - keycloak
      - opa
      - openldap
    networks:
      - dive25-service
      - dive25-data
    healthcheck:
      test: ["CMD", "wget", "--no-check-certificate", "-O", "-", "https://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: https://api.dive25.local:3002/api/v1
        NEXT_PUBLIC_FRONTEND_URL: https://frontend.dive25.local:3001
        NEXT_PUBLIC_KEYCLOAK_URL: https://keycloak.dive25.local:8443/auth
        NEXT_PUBLIC_KEYCLOAK_REALM: dive25
        NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: dive25-frontend
        NEXT_PUBLIC_KONG_URL: https://dive25.local:8443
    container_name: dive25-staging-frontend
    env_file: .env
    environment:
      # Authentication endpoints
      NEXT_PUBLIC_API_URL: https://api.dive25.local:3002/api/v1
      NEXT_PUBLIC_FRONTEND_URL: https://frontend.dive25.local:3001
      NEXT_PUBLIC_KEYCLOAK_URL: https://keycloak.dive25.local:8443/auth
      NEXT_PUBLIC_KEYCLOAK_REALM: dive25
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: dive25-frontend
      NEXT_PUBLIC_KEYCLOAK_ADMIN_URL: https://keycloak.dive25.local:8443/admin
      # Main gateway URL for the frontend
      NEXT_PUBLIC_KONG_URL: https://dive25.local:8443
      # Admin UI endpoints
      NEXT_PUBLIC_GRAFANA_URL: https://grafana.dive25.local:4434
      NEXT_PUBLIC_PROMETHEUS_URL: https://prometheus.dive25.local:4437
      NEXT_PUBLIC_KONGA_URL: https://konga.dive25.local:4439
      NEXT_PUBLIC_MONGODB_EXPRESS_URL: https://mongo-express.dive25.local:4435
      NEXT_PUBLIC_PHPLDAPADMIN_URL: https://phpldapadmin.dive25.local:4436
      USE_HTTPS: true
      SSL_CERT_PATH: /app/certs/tls.crt
      SSL_KEY_PATH: /app/certs/tls.key
      HOSTNAME: 0.0.0.0
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      - api
      - keycloak
    networks:
      - dive25-service
    healthcheck:
      test: curl -f http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Curl tools container for testing and debugging
  curl_tools:
    image: alpine:latest
    container_name: ${PROJECT_PREFIX:-dive25}-curl-tools
    restart: unless-stopped
    command: >
      sh -c "apk add --no-cache curl jq bash bind-tools ca-certificates net-tools tcpdump iputils && 
      mkdir -p /tmp/certs && 
      echo 'Test container ready for debugging...' && 
      tail -f /dev/null"
    volumes:
      - ./certs:/certs:ro
      - ./certs:/tmp/certs:ro
    networks:
      - dive25-public
      - dive25-service
      - dive25-data
      - dive25-admin
    healthcheck:
      test: ["CMD", "curl", "--version"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  # Public-facing network for edge services
  dive25-public:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
  
  # Service network for internal application services
  dive25-service:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.1.0/24
  
  # Data network for database services
  dive25-data:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.2.0/24
  
  # Admin network for management services
  dive25-admin:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.3.0/24

volumes:
  mongo_data:
  postgres_data:
  ldap_data:
  ldap_config:
  prometheus_data:
  grafana_data:
  keycloak_data:
  api_storage:
  api_temp:
  api_logs:
  opa_data:
  kong_data:
  keycloak_config_data: 