version: '3.8'

services:
  # MongoDB for document metadata
  mongodb:
    image: mongo:6.0
    platform: linux/arm64
    container_name: dive25-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin_password}
      MONGO_INITDB_DATABASE: dive25
    volumes:
      - mongo_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Express for MongoDB administration
  mongo-express:
    image: mongo-express:latest
    platform: linux/arm64
    container_name: dive25-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-admin_password}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-admin_password}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin_password}
    depends_on:
      - mongodb
    networks:
      - dive25-network

  # PostgreSQL for Keycloak
  postgres:
    image: postgres:15
    platform: linux/arm64
    container_name: dive25-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Keycloak Identity Provider
  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    container_name: dive25-keycloak
    restart: unless-stopped
    command: ["start-dev"]
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: keycloak
      KC_HTTP_RELATIVE_PATH: /auth
      KC_FEATURES: admin-api,impersonation,import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/bin/realm-export.json
      - ./keycloak/clients:/opt/keycloak/bin/clients
      - ./keycloak/identity-providers:/opt/keycloak/bin/identity-providers
      - ./keycloak/test-users:/opt/keycloak/bin/test-users
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Add to your docker-compose.yml
  keycloak-config:
    image: curlimages/curl:latest
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - ./keycloak/configure-keycloak.sh:/configure-keycloak.sh
      - ./keycloak/realm-export.json:/realm-export.json
      - ./keycloak/identity-providers:/identity-providers
      - ./keycloak/test-users:/test-users
    environment:
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    entrypoint: ["/bin/sh", "/configure-keycloak.sh"]
    networks:
      - dive25-network

  # OpenLDAP Directory Service
  openldap:
    image: osixia/openldap:latest
    container_name: dive25-openldap
    restart: unless-stopped
    environment:
      LDAP_ORGANISATION: "DIVE25"
      LDAP_DOMAIN: "dive25.local"
      LDAP_BASE_DN: "dc=dive25,dc=local"
      LDAP_ADMIN_PASSWORD: "admin_password"
      LDAP_CONFIG_PASSWORD: "config_password"
      LDAP_READONLY_USER: "true"
      LDAP_READONLY_USER_USERNAME: "readonly"
      LDAP_READONLY_USER_PASSWORD: "readonly_password"
      LDAP_TLS: "false"
      LDAP_SKIP_DEFAULT_BOOTSTRAP: "false"
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap/slapd.d
      - ./openldap/bootstrap:/container/service/slapd/assets/config/bootstrap
    command: ["--copy-service"]
    ports:
      - "389:389"
      - "636:636"
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "ldapsearch", "-x", "-H", "ldap://localhost:389", "-D", "cn=admin,dc=dive25,dc=local", "-w", "admin_password", "-b", "dc=dive25,dc=local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # LDAP Admin UI
  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: dive25-phpldapadmin
    restart: unless-stopped
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: "openldap"
      PHPLDAPADMIN_HTTPS: "false"
    ports:
      - "8085:80"
    depends_on:
      - openldap
    networks:
      - dive25-network

  # OPA Policy Agent
  opa:
    build:
      context: ./opa
      dockerfile: Dockerfile
    platform: linux/arm64
    container_name: dive25-opa
    restart: unless-stopped
    volumes:
      - ./opa/policies:/opt/opa/policies
      - ./opa/data:/data
    ports:
      - "8181:8181"
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Kong API Gateway
  kong-database:
    image: postgres:13
    container_name: dive25-kong-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_password
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 10s

  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    restart: on-failure
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
    networks:
      - dive25-network

  kong:
    image: kong:latest
    container_name: dive25-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
    volumes:
      - ./kong/kong.yml:/etc/kong/kong.yml:ro
    depends_on:
      - kong-database
      - kong-migrations
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # Kong Admin UI
  konga:
    image: pantsel/konga:latest
    container_name: dive25-konga
    restart: unless-stopped
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong_password
      DB_DATABASE: konga
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      - kong-database
    networks:
      - dive25-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dive25-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dive25-grafana
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3100:3000"
    depends_on:
      - prometheus
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # MongoDB Exporter for Prometheus
  mongodb-exporter:
    image: percona/mongodb_exporter:0.32.0
    container_name: dive25-mongodb-exporter
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-admin_password}@mongodb:27017/admin?directConnection=true
    ports:
      - "9216:9216"
    depends_on:
      - mongodb
    networks:
      - dive25-network

  # Node Exporter for Host Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: dive25-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - dive25-network

  # Backend API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: dive25-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_APP_USERNAME:-dive25_app}:${MONGO_APP_PASSWORD:-app_password}@mongodb:27017/dive25
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: dive25
      KEYCLOAK_CLIENT_ID: dive25-api
      KEYCLOAK_CLIENT_SECRET: change-me-in-production
      OPA_URL: http://opa:8181/v1/data
      LDAP_URL: ldap://openldap:389
      CORS_ALLOWED_ORIGINS: http://localhost:3000,https://dive25.local,https://dive25.com
      STORAGE_PATH: /app/storage
      TEMP_STORAGE_PATH: /app/temp
    volumes:
      - ./api/src:/app/src
      - api_storage:/app/storage
      - api_temp:/app/temp
      - api_logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - keycloak
      - opa
      - openldap
    networks:
      - dive25-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend
  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: ${API_BASE_URL:-http://localhost:3000/api/v1}
        NEXT_PUBLIC_KEYCLOAK_URL: ${KEYCLOAK_BASE_URL:-http://localhost:8080}
        NEXT_PUBLIC_KEYCLOAK_REALM: ${KEYCLOAK_REALM:-dive25}
        NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-dive25-frontend}
    platform: linux/arm64
    container_name: dive25-frontend
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - dive25-network

networks:
  dive25-network:
    driver: bridge

volumes:
  mongo_data:
  postgres_data:
  ldap_data:
  ldap_config:
  kong_data:
  prometheus_data:
  grafana_data:
  api_storage:
  api_temp:
  api_logs:
