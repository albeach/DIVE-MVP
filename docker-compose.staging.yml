services:
  mongodb:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: dive25_staging
    ports:
      - "27019:27017"
    volumes:
      - mongodb_staging_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ldap:
    image: osixia/openldap:latest
    environment:
      LDAP_ORGANISATION: "DIVE25"
      LDAP_DOMAIN: "dive25.local"
      LDAP_ADMIN_PASSWORD: "admin_password"
    ports:
      - "2389:389"
      - "2636:636"
    volumes:
      - ldap_staging_data:/var/lib/ldap
      - ldap_staging_config:/etc/ldap/slapd.d
    healthcheck:
      test: ["CMD", "ldapsearch", "-x", "-h", "localhost", "-b", "dc=dive25,dc=local", "-D", "cn=admin,dc=dive25,dc=local", "-w", "admin_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9202:9200"
    volumes:
      - elasticsearch_staging_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_password
    command: server /data --console-address ":9001"
    ports:
      - "9004:9000"
      - "9005:9001"
    volumes:
      - minio_staging_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL for Keycloak
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Keycloak for Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_RELATIVE_PATH: /auth
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8080/auth/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kong Database
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong_password
    ports:
      - "5434:5432"
    volumes:
      - kong_staging_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kong Migrations
  kong-migrations:
    image: kong:3.3.1-alpine
    platform: linux/amd64
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    restart: on-failure

  # Kong API Gateway
  kong:
    image: kong:3.3.1-alpine
    platform: linux/amd64
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      kong-database:
        condition: service_healthy
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  # Kong Admin UI
  konga:
    image: pantsel/konga:latest
    platform: linux/amd64
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong_password
      DB_DATABASE: konga
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      - kong-database
      - kong

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - grafana_staging_data:/var/lib/grafana
    ports:
      - "3100:3000"
    depends_on:
      - prometheus

  opa:
    image: openpolicyagent/opa:1.2.0-envoy-static
    ports:
      - "8181:8181"
    command: "run --server --addr :8181 --log-level debug --set=decision_logs.console=true /policies/authz.rego /policies/data.json"
    volumes:
      - ./policies:/policies
    healthcheck:
      test: ["CMD", "/opa", "version"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  api:
    build:
      context: ./api
      dockerfile: Dockerfile.staging
    environment:
      NODE_ENV: staging
      PORT: 3000
      MONGODB_URI: mongodb://admin:admin_password@mongodb:27017/dive25_staging?authSource=admin
      LDAP_URL: ldap://ldap:389
      LDAP_BIND_DN: cn=admin,dc=dive25,dc=local
      LDAP_BIND_CREDENTIALS: admin_password
      LDAP_SEARCH_BASE: dc=dive25,dc=local
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minio_admin
      MINIO_SECRET_KEY: minio_password
      MINIO_BUCKET: dive25-staging-bucket
      JWT_SECRET: staging_jwt_secret_key
      OPA_URL: http://opa:8181
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080/auth
      KEYCLOAK_REALM: dive25
      KEYCLOAK_CLIENT_ID: dive25-api
      KEYCLOAK_CLIENT_SECRET: change-me-in-production
    ports:
      - "3003:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      ldap:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_healthy
      opa:
        condition: service_healthy
      keycloak:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.staging
    environment:
      NODE_ENV: staging
      PORT: 8080
      API_URL: http://api:3000
      NEXT_PUBLIC_KEYCLOAK_URL: "http://localhost:8082"
      NEXT_PUBLIC_KEYCLOAK_REALM: "dive25"
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: "dive25-frontend"
    ports:
      - "8083:8080"
    depends_on:
      api:
        condition: service_healthy
      keycloak:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  mongodb_staging_data:
  ldap_staging_data:
  ldap_staging_config:
  elasticsearch_staging_data:
  minio_staging_data:
  postgres_staging_data:
  kong_staging_data:
  prometheus_staging_data:
  grafana_staging_data: 